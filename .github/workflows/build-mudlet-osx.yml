name: ðŸ”¨ Build Mudlet macOS

on:
  push:
    branches: [master, development, release-*, actions-test]
    tags: [Mudlet-*]
  pull_request:
  workflow_dispatch:
    inputs:
      scheduled:
        description: 'Imitate a scheduled build'
        required: false
        default: 'false'
  schedule:
    - cron: '0 2 * * *'

jobs:
  compile-mudlet:
    name: ${{matrix.buildname}}
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            buildname: 'macos (arm64) / c++, lua tests'
            triplet: arm64-osx
            compiler: clang_64
            qt: '5.15.13'
            deploy: 'deploy'
            run_tests: 'true'
          - os: macos-12
            buildname: 'macos (x86_64) / c++, lua tests'
            triplet: x64-osx
            compiler: clang_64
            qt: '5.14.2'
            deploy: 'deploy'
            run_tests: 'true'
    env:
      BOOST_ROOT: ${{github.workspace}}/3rdparty/boost
      BOOST_URL: https://sourceforge.net/projects/boost/files/boost/1.83.0/boost_1_83_0.tar.bz2/download
      VCPKG_ROOT: ${{github.workspace}}/3rdparty/vcpkg

    steps:
    - name: Checkout Mudlet source code
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - name: Install Qt
      # need to install qt a different way for arm64-osx
      if: ${{ matrix.triplet != 'arm64-osx' }}
      uses: jurplel/install-qt-action@v4
      with:
        version: ${{matrix.qt}}
        dir: ${{runner.workspace}}
        cache: true

    - name: Restore Boost cache
      uses: actions/cache@v4
      id: cache-boost
      with:
        path: ${{env.BOOST_ROOT}}
        key: boost

    - name: Install Boost
      if: steps.cache-boost.outputs.cache-hit != 'true'
      run: |
        mkdir -p $BOOST_ROOT
        curl --progress-bar --location --output $BOOST_ROOT/download.tar.bz2 $BOOST_URL
        7z -o$BOOST_ROOT x $BOOST_ROOT/download.tar.bz2 -y -bd
        7z -o$BOOST_ROOT x $BOOST_ROOT/download.tar -y -bd
        cd $BOOST_ROOT && cp -r boost_*/* .
        rm -rf boost_*/* download.tar.bz2 download.tar
      shell: bash

    - name: Use CMake 3.30.3
      uses: lukka/get-cmake@v3.30.3

    - name: Install non-vcpkg dependencies (1/2)
      env:
        HOMEBREW_NO_ANALYTICS: "ON"
        HOMEBREW_NO_AUTO_UPDATE: "ON"
        HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: "ON"
        HOMEBREW_NO_INSTALL_CLEANUP: "ON"
      run: |
        # dependencies needed for vcpkg specifically.
        BREWS=("automake" "autoconf" "pkg-config")

        # if on arm64, also install libtool and qt@5
        if [ "$(uname -m)" = "arm64" ]; then
         BREWS+=("libtool" "qt@5")
        fi

        # Loop through each brew package
        for brew in "${BREWS[@]}"; do
         if ! brew list --formula | grep -q "^${brew}$"; then
          echo "Installing ${brew}..."
          brew install "$brew"
         else
          echo "${brew} is already installed."
         fi
        done


        # Set these here so that vcpkg can use them.
        # Use latest available XCode
        echo "DEVELOPER_DIR=$(xcode-select --print-path)" >> $GITHUB_ENV
        echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV


    - name: Restore from cache and run vcpkg
      uses: lukka/run-vcpkg@v7
      env:
        vcpkgResponseFile: ${{github.workspace}}/3rdparty/our-vcpkg-dependencies/vcpkg-${{matrix.triplet}}-dependencies
      with:
        vcpkgArguments: '@${{env.vcpkgResponseFile}}'
        vcpkgDirectory: '${{github.workspace}}/3rdparty/vcpkg'
        appendedCacheKey: ${{hashFiles(env.vcpkgResponseFile)}}-${{matrix.triplet}}-cachekey

    - name: Install non-vcpkg dependencies (2/2)
      env:
        HOMEBREW_NO_ANALYTICS: "ON"
        HOMEBREW_NO_AUTO_UPDATE: "ON"
        HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: "ON"
        HOMEBREW_NO_INSTALL_CLEANUP: "ON"
      run: |
        # these aren't available or don't work well in vcpkg
        BREWS=("libzzip" "libzip" "ccache" "luarocks" "expect" "mitchellh/gon/gon")

        # Loop through each brew package
        for brew in "${BREWS[@]}"; do
          if ! brew list --formula | grep -q "^${brew}$"; then
            echo "Installing ${brew}..."
            brew install "$brew"
          else
           echo "${brew} is already installed."
         fi
        done

        echo "CCACHE_DIR=${{runner.workspace}}/ccache" >> $GITHUB_ENV

        # Install lua-yajl early to generate translation statistics
        export PATH="${{env.VCPKG_ROOT}}/installed/${{matrix.triplet}}/tools/lua:$PATH"
        # workaround https://github.com/lloyd/yajl/issues/209
        # Rock locations search is hardcoded to -L/usr/local/lib and not adjustable
        export LIBRARY_PATH="${{env.VCPKG_ROOT}}/installed/${{matrix.triplet}}/lib:$LIBRARY_PATH"
        # LUA_INCDIR needs to be passed as well due to https://github.com/luarocks/luarocks/issues/1239
        luarocks --lua-dir "${{env.VCPKG_ROOT}}/installed/${{matrix.triplet}}/tools/lua" --lua-version "5.1" LUA_INCDIR="${{env.VCPKG_ROOT}}/installed/${{matrix.triplet}}/include" install YAJL_INCDIR="${{env.VCPKG_ROOT}}/installed/${{matrix.triplet}}/include" YAJL_LIBDIR="${{env.VCPKG_ROOT}}/installed/${{matrix.triplet}}/lib" LUA_INCDIR="${{env.VCPKG_ROOT}}/installed/${{matrix.triplet}}/include" --local lua-yajl
        # for some reason it gets installed in a place where lua-yajl can't find it after, fix that
        mkdir -p /Users/runner/work/Mudlet/Mudlet/3rdparty/vcpkg/packages/yajl_${{matrix.triplet}}/lib/
        cp "${{env.VCPKG_ROOT}}/installed/${{matrix.triplet}}/lib/libyajl.2.dylib" "${{env.VCPKG_ROOT}}/packages/yajl_${{matrix.triplet}}/lib/libyajl.2.dylib"


        # Allow stats generation script to see location of lua-yajl
        eval "$(luarocks path --local --lua-version "5.1")"
        echo "LUA_PATH=$LUA_PATH" >> $GITHUB_ENV
        echo "LUA_CPATH=$LUA_CPATH" >> $GITHUB_ENV

    - name: (macOS) Add additional paths for Qt (1/1)
      if: ${{ matrix.triplet == 'arm64-osx' }}
      run: |
        echo "LDFLAGS=-L/opt/homebrew/opt/qt@5/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/opt/homebrew/opt/qt@5/include" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/opt/homebrew/opt/qt@5/lib/pkgconfig" >> $GITHUB_ENV
        echo "QT5_PREFIX=$(brew --prefix qt@5)" >> $GITHUB_ENV
        # both of these needed for the packager / installer on Github
        echo "PATH=/opt/homebrew/opt/qt@5/bin:$PATH" >> $GITHUB_ENV
        echo "Qt5_DIR=/opt/homebrew/opt/qt@5" >> $GITHUB_ENV


    - name: restore ccache
      uses: actions/cache@v4
      with:
        path: ${{runner.workspace}}/ccache
        key: ccache-macos-clang_64-5.14.2-${{ github.sha }}
        restore-keys: ccache-macos-clang_64-5.14.2
        save-always: true

    - name: Set build info
      run: |
        brew install pcre
        ${{github.workspace}}/CI/travis.validate_deployment.sh
        ${{github.workspace}}/CI/travis.set-build-info.sh
        brew uninstall pcre

    - name: check ccache stats prior to build
      run: |
        ccache --show-stats
        ccache --zero-stats

    - name: Build Mudlet
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{github.workspace}}/CMakeLists.txt'
        useVcpkgToolchainFile: true
        buildDirectory: '${{runner.workspace}}/b/ninja'
        cmakeAppendedArgs: >-
          -G Ninja
          -DCMAKE_PREFIX_PATH=${{ env.QT5_PREFIX }}
          -DVCPKG_APPLOCAL_DEPS=OFF
      env:
        NINJA_STATUS: '[%f/%t %o/sec] '

    - name: check ccache stats post build
      run: |
        ccache --show-stats -vv

    - name: install dependencies for packaging/tests
      run: |
        export PATH="${{env.VCPKG_ROOT}}/installed/${{matrix.triplet}}/tools/lua:$PATH"
  
        shopt -s expand_aliases
        
        alias run-luarocks="luarocks --lua-dir "${{env.VCPKG_ROOT}}/installed/${{matrix.triplet}}/tools/lua" --lua-version "5.1" LUA_INCDIR="${{env.VCPKG_ROOT}}/installed/${{matrix.triplet}}/include""
       
  
        run-luarocks install --local LuaFileSystem
        run-luarocks install --local luautf8
        run-luarocks install --local lua-zip
        run-luarocks install SQLITE_INCDIR="${{env.VCPKG_ROOT}}/installed/${{matrix.triplet}}/include" --local LuaSQL-SQLite3
        run-luarocks install PCRE_INCDIR="${{env.VCPKG_ROOT}}/installed/${{matrix.triplet}}/include" --local lrexlib-pcre
  
        # CI changelog generation dependencies
        run-luarocks install --local argparse
        run-luarocks install --local lunajson
  
        # Lua-based tests
        run-luarocks install --local busted
   
  
    - name: package Mudlet
      if: (runner.os == 'Linux' || runner.os == 'macOS')
      run: |
       export ARCH=$(uname -m)
       echo "ARCH=$ARCH" >> $GITHUB_ENV
       ${{github.workspace}}/CI/travis.after_success.sh
      env:
          BUILD_FOLDER: ${{runner.workspace}}/b/ninja
          RUNNER_OS: ${{runner.os}}
          DEPLOY: ${{matrix.deploy}}
          TRIPLET: ${{matrix.triplet}}

    - name: Upload packaged Mudlet
      uses: actions/upload-artifact@v4
      if: env.UPLOAD_FILENAME
      with:
          name: ${{env.UPLOAD_FILENAME}}
          path: ${{env.FOLDER_TO_UPLOAD}}

    - name: (macOS) Prep binary for running tests
      if: matrix.run_tests == 'true' && runner.os == 'macOS'
      run: |
          if [ -d "${{runner.workspace}}/b/ninja/${{env.UPLOAD_FILENAME}}.app" ]; then
             cp -r ${{runner.workspace}}/b/ninja/${{env.UPLOAD_FILENAME}}.app ~/Desktop/Mudlet.app
          else
            cp -r ${{runner.workspace}}/b/ninja/src/mudlet.app ~/Desktop/Mudlet.app
          fi
          cd ~/Desktop
          sudo codesign --remove-signature Mudlet.app
      shell: bash

    - name: (macOS) Run Lua tests
      if: matrix.run_tests == 'true' && runner.os == 'macOS'
      timeout-minutes: 5
      shell: bash
      run: ~/Desktop/Mudlet.app/Contents/MacOS/mudlet --profile "Mudlet self-test" --mirror
      env:
       AUTORUN_BUSTED_TESTS: 'true'
       TESTS_DIRECTORY: ${{github.workspace}}/src/mudlet-lua/tests
       QUIT_MUDLET_AFTER_TESTS: 'true'

    - name: Passed Lua tests
      if: matrix.run_tests == 'true'
      run: |
        if [ -e /tmp/busted-tests-failed ]
        then
          echo "Lua tests failed - see the action called 'Run Lua tests' above for detailed output."
          exit 1
        fi
        echo "Tests passed!"
